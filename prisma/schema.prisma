// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// كل مجموعه تحتوي ع عده لحظات
// كل لحظه تندرج تحت مجموعه واحده فقط

model Moment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text 
  category  Category @default(HAPPY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   Int?    
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @unique                           
  createdAt DateTime @default(now())             
  moments   Moment[]  // العلاقة مع اللحظات
}


model Quote {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  category  Category 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  HAPPY
  NORMAL
}


// ----------------------------For User Model & Google Provider 

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
